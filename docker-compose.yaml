services:
  postgres:
    image: postgres:14-alpine
    ports:
      - '5432:5432'
    volumes:
      - ~/apps/postgres:/var/lib/postgresql/data
    container_name: whale-postgres
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=whale
    networks:
      - elastic
  pgadmin:
    image: dpage/pgadmin4
    restart: always
    container_name: whale-pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=pgadmin4
    ports:
      - '5050:80'
    volumes:
      - ~/apps/pgadmin:/var/lib/pgadmin/data
    depends_on:
      - postgres
    networks:
      - elastic
  redis:
    container_name: whale-redis-cache
    image: redis
    ports:
      - '6379:6379'
    volumes:
      - ~/apps/redis:/var/lib/redis/data
    networks:
      - elastic

  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.1
    volumes:
      - ./certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: elasticsearch\n"\
          "    dns:\n"\
          "      - elasticsearch\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://elasticsearch:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Good to go!";
      '
    networks:
      - elastic

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.1
    container_name: whale-search
    environment:
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - node.name=search
      - cluster.name=whale-cluster
      - bootstrap.memory_lock=true
      - discovery.type=single-node
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}

      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/elasticsearch/elasticsearch.key
      - xpack.security.http.ssl.certificate=certs/elasticsearch/elasticsearch.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/elasticsearch/elasticsearch.key
      - xpack.security.transport.ssl.certificate=certs/elasticsearch/elasticsearch.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=basic
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./certs:/usr/share/elasticsearch/config/certs
      - .~/apps/search:/var/lib/search/data
    ports:
      - '9200:9200'
    networks:
      - elastic
  api:
    build:
      context: .
      dockerfile: ./Dockerfile
      target: development
    command: npm run start:dev
    ports:
      - '3000:3000'
    volumes:
      - .:/usr/src/app
    environment:
      - NODE_EXTRA_CA_CERTS=certs/ca/ca.crt
    env_file:
      - ./.env
    networks:
      - elastic
networks:
  elastic: